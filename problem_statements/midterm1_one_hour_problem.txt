One Hour Problem Statement (Groups of two or three)

You must sort a jar of ten jelly beans by color and flavor. These are very unusual jelly beans, who’s flavors do not always match with the color. Your SI Peer Leader, being a cruel individual, insists 
that this project be implemented entirely in C++ in the next 45 to 60 minutes (leaving 10 minutes for testing).  There are three colors and four flavors. The colors are {red, blue, green} and the 
flavors are {apple, cinnamon, cherry, bubblegum}. Your SI Peer Leader wants to be able to input each jelly bean into the system in {color, flavor} format—there are ten beans in the jar and each will 
be input into the system.  The program must then return a list of all jelly beans in unsorted format to the terminal. 

However, as mentioned, this program must then sort the array of beans, first by color, then by flavor. It is not important to sort these beans efficiently as the number of beans is low, so a simple 
bubble sort will work (a definition of the algorithm can be found on Wikipedia). The beans must first be sorted by color, and flavor within a color. The order of precedence for color (from highest 
priority to lowest priority) is <red, green, blue>, and the order of precedence for flavor is <cinnamon, cherry, apple, bubblegum>. 

Once the array is sorted, the sorted list of beans (according to priority) must be printed to the terminal.

Jelly bean colors and flavors will be given in <”color”, “flavor”> format as a vector of two strings, and should be returned to the screen in the same format.  Your program must be able to accept 
input from the user in this format. It may be a good idea to use string comparison to convert these text values to numeric codes according to their priority. However, you may use any method you prefer 
to sort these beans.

Please split into groups of two or three (doing your best to make sure everyone has a group) and write out a solution to this problem. Feel free to use any methods you prefer to get it done, and 
always be willing to ask questions from your fellow students or the SI Peer Leader.
