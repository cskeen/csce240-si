{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww22800\viewh17480\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Suppose the Excessively Simple University of South Carolina wants to create an excessively simple model of their university.\
ESU structures their university into five departments. Each department has 20 professors, and 2400 students, and offers 40 \
courses. Each professor teaches three classes. They want a model that represents which students are taking which course under\
which professor, for each of the five departments. This means that there should be five departments. Each department should \
have 40 classes, and each class should have one professor and fourty students. Your model should be pre-seeded with all of the\
information that is a part of this model (i.e. the user should not need to enter student IDs, names, professor IDs, etc).\
\
Your model will need allow the user to perform one of the following three actions\
---------------------------------------------------------------------------------\
1. Print out a tree representing the classes that are a part of each department in the following format.\
\
Department1\
	Course1\
		Class1\
		Class2\
	Course2\
		Class3\
	...\
\
Department2\
	Course3\
		Class4\
	Course4\
		Class5\
		Class6\
	...\
	\
...\
\
\
\
2. Print out all of the students who are taking a particular course, no matter which professor is teaching it, in the following format.\
\
\
\
Course1\
	Class1\
		Student1\
		Student2\
		Student3\
		...\
	Class2\
		Student4\
		Student5\
		Student6\
		...\
	...\
...\
\
\
\
3. Print out all of a professor's students in the following format. This needs to take a professor's ID number as an input.\
\
Class1\
	Student1\
	Student2\
	...\
...\
		\
\
\
Implementation Advice / Notes\
-----------------------------\
\
1. How to update git: "git pull"\
\
Git username for pushing: csce240si\
Git password for pushing: UofSC@17\
\
Once git is updated, you need to change to your group's branch of the repository. There are four groups, and each group has a\
branch in the form 'group1', 'group2', etc.\
\
Changing to a new branch of the repository uses the command "git checkout <branch>". So, if I wanted to use the branch for\
group1, I would type "git checkout group1".\
\
When I want to push code to the repository (so my group members can use it), I would use the following sequence of commands\
git add -A .										(This adds all the new files to the "commit")\
git commit -m "Message for my group members about what I'm adding"	(This turns the files into an actual commit with comment)\
git push										(This actually uploads the commit to the repository)\
\
Remember! Other members of the group need to "git pull" before they will see any of your changes. Update early and often!\
\
2. 
\b\fs36 Don't Panic.
\b0\fs24  This problem isn't graded, and the goal is personal improvement, so just do as much as you can with your group.\
\
3. Sketch out a plan for the program on a sheet of paper as a group. It doesn't need to be perfect, just workable. There should be\
(at least) five different classes involved here. Department, Professor, Course, Class, Student. Each class ought to store *at \
least* both an identifying number and a human-readable name as a string, plus any additional information you feel is necessary \
(such as pointers, other objects, etc.). There should be at least one constructor and a destructor. The constructor ought to \
take an ID number and a string as arguments. You will want methods to let you return these properties to your main program.\
Take about 15 minutes as a group to sketch this out, then continue. Don't get stuck here. 
\b Hint: pass by value is a bad way\
to handle passing around a set of 40 different student names. You might want to pass a reference to an array or linked list \
instead.
\b0 \
\
4. Divide and conquer. Once you have a sketch of the basic data structure, you can split up the work of actually writing each\
of the various classes between the group members. They need only implement the class defined by the data structure defined on\
your sheet--i.e. each class ought to have the variables and public methods described in your group's sketched out plan. Any other\
functions that need to be implemented to make those public methods work should be implemented as private functions in the class\
declaration. Each group should have a branch on the repository they can use for doing collaborative development (see Note #1).\
This shouldn't take longer than 20 minutes between you. 
\b These data structures don't need to be complicated.
\b0 \
\
5. Create a helper class. Not every class needs to store data. In this case, your program needs to come up with human-readable\
names for 2400 students. That's not something you're going to be able to enter manually. At the very least you should have a\
helper class that provides a method that returns a random name for a student, a method to return a random name for a course,\
a method to return a random name for a professor, etc. Hint: You can put words into an array, then use Math.rand() to generate\
a random number. This random number can be used to find a random index in an array of words. If you want to randomly generate\
a first and last name, you might want an array for personal names and an array for family names. These names don't need to\
be complicated, and I don't care if they occasonally repeat, but make sure there are at least 1500 possible combinations for\
students, and at least 100 combinations for both professors and class names. For student names, that means that you need to \
manually write about 50 different name parts. 
\b If this sounds tedious
\b0 , you can use the following sites to generate a comma\
separated list of random names:\
\
http://listofrandomnames.com/index.cfm?generated -> https://convert.town/column-to-comma-separated-list\
\
6. Don't be afraid of linked lists. You all have done linked lists before, so you know how they work (and I don't mind\
at all if you borrow code from the last project...). If you know how to do linked lists, it's not much of a jump to doing\
a tree structure. You can also do this with nothing but arrays if you want. It's up to you all as programmers to make a call\
about what sort of data structure is appropriate.\
}